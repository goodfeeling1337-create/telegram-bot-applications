import asyncio
import logging
import re
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

from config import BOT_TOKEN, ADMIN_USER_IDS, MESSAGES, BUTTONS
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

class TelegramBot:
    def __init__(self):
        self.application = None
        self.db = Database()
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in ADMIN_USER_IDS
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton(BUTTONS['apply'])]
        ]
        
        if self.is_admin(user.id):
            keyboard.append([KeyboardButton(BUTTONS['admin_panel'])])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            MESSAGES['welcome'],
            reply_markup=reply_markup
        )
    
    async def show_main_menu_silent(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton(BUTTONS['apply'])]
        ]
        
        if self.is_admin(user.id):
            keyboard.append([KeyboardButton(BUTTONS['admin_panel'])])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def show_main_menu_with_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, message: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton(BUTTONS['apply'])]
        ]
        
        if self.is_admin(user.id):
            keyboard.append([KeyboardButton(BUTTONS['admin_panel'])])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.clear_user_state(user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.show_main_menu(update, context)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = self.is_admin(user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        state_data = self.db.get_user_state(user.id)
        if state_data and state_data['state'] == 'broadcast_message':
            await self.send_broadcast_message(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if text == BUTTONS['apply']:
            await self.start_application(update, context)
        elif text == BUTTONS['admin_panel'] and is_admin:
            await self.admin_panel(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_admin:
            await self.show_statistics(update, context)
        elif text == "üì® –†–∞—Å—Å—ã–ª–∫–∞" and is_admin:
            await self.start_broadcast(update, context)
        elif text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏" and is_admin:
            await self.view_applications(update, context)
        elif text == "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and is_admin:
            await self.view_inactive_users(update, context)
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É" and is_admin:
            await self.start_delete_application(update, context)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
            state_data = self.db.get_user_state(user.id)
            if state_data and state_data['state'] in ['application_fio', 'application_phone', 'application_info', 'delete_application']:
                await self.handle_application_state(update, context)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await self.handle_random_message(update, context)
    
    async def start_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.clear_user_state(user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.save_user_state(user.id, 'application_fio')
        
        await update.message.reply_text(MESSAGES['application_start'])
    
    async def handle_application_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        text = update.message.text
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state_data = self.db.get_user_state(user.id)
        if not state_data:
            return
        
        state = state_data['state']
        
        if state == 'application_fio':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            if text and len(text.strip()) > 0:
                import json
                data = {'fio': text.strip()}
                self.db.save_user_state(user.id, 'application_phone', json.dumps(data))
                await update.message.reply_text(MESSAGES['application_phone'])
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        
        elif state == 'application_phone':
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if self.validate_phone(text):
                import json
                # –ü–æ–ª—É—á–∞–µ–º –§–ò–û –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                fio_data = json.loads(state_data['data']) if state_data['data'] else {}
                data = {
                    'fio': fio_data.get('fio', user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), 
                    'phone': text.strip()
                }
                self.db.save_user_state(user.id, 'application_info', json.dumps(data))
                await update.message.reply_text(MESSAGES['application_info'])
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 (999) 123 45 67 –∏–ª–∏ +7 999 123 45 67)"
                )
        
        elif state == 'application_info':
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            if text and len(text.strip()) > 0:
                await self.complete_application(update, context, text.strip())
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:")
        
        elif state == 'delete_application':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            await self.handle_delete_application(update, context, text)
        
        elif state.startswith('reply_application_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
            await self.handle_reply_message(update, context, text, state)
    
    async def handle_random_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.clear_user_state(user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Å–ª—É—á–∞–π–Ω–æ–º –≤–≤–æ–¥–µ
        await self.show_main_menu_with_message(update, context, "‚ùì –ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç. –û—Ç–∫—Ä–æ—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é üìã")
    
    async def handle_reply_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        app_id = int(state.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        applications = self.db.get_applications()
        app = next((a for a in applications if a['id'] == app_id), None)
        
        if not app:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user_by_id(app['user_id'])
        telegram_id = user_data.get('telegram_id')
        
        if not telegram_id:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=telegram_id,
                text=f"üí¨ **–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{app_id}:**\n\n{text}",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
            success = self.db.update_application_status(app_id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞')
            if success:
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {app_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {app_id}")
            
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—è–≤–∫–∏ #{app_id}. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.db.clear_user_state(user.id)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await asyncio.sleep(2)
            await self.admin_panel(update, context)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.db.clear_user_state(user.id)
    
    async def handle_delete_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            app_id = int(text.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—è–≤–∫–∞
            applications = self.db.get_applications()
            if not any(app['id'] == app_id for app in applications):
                await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
            success = self.db.delete_application(app_id)
            
            if success:
                await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{app_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.clear_user_state(user.id)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        user = update.effective_user
        
        if not self.is_admin(user.id):
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        await query.answer()
        
        data = query.data
        
        if data == "cancel_broadcast":
            await self.handle_cancel_broadcast(update, context)
            return
        
        action, app_id = data.split('_', 1)
        app_id = int(app_id)
        
        if action == "reply":
            await self.handle_reply_application(update, context, app_id)
        elif action == "complete":
            await self.handle_complete_application(update, context, app_id)
        elif action == "delete":
            await self.handle_delete_application_callback(update, context, app_id)
    
    async def handle_reply_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE, app_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
        self.db.save_user_state(update.effective_user.id, f'reply_application_{app_id}')
        
        await query.edit_message_text(
            f"üí¨ **–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{app_id}**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_complete_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE, app_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'"""
        query = update.callback_query
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
        success = self.db.update_application_status(app_id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞')
        
        if success:
            await query.edit_message_text(
                f"‚úÖ **–ó–∞—è–≤–∫–∞ #{app_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'",
                parse_mode=ParseMode.MARKDOWN
            )
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await asyncio.sleep(2)
            await self.admin_panel(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.")
    
    async def handle_delete_application_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, app_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å'"""
        query = update.callback_query
        
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
        success = self.db.delete_application(app_id)
        
        if success:
            await query.edit_message_text(
                f"üóëÔ∏è **–ó–∞—è–≤–∫–∞ #{app_id} —É–¥–∞–ª–µ–Ω–∞!**",
                parse_mode=ParseMode.MARKDOWN
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await asyncio.sleep(1)
            await self.send_admin_panel_message(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    
    async def complete_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE, additional_info: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            phone_state = self.db.get_user_state(user.id)
            if not phone_state or phone_state['state'] != 'application_info':
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            import json
            try:
                data = json.loads(phone_state['data'])
                fio = data.get('fio', user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                phone = data.get('phone', '')
            except (json.JSONDecodeError, KeyError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user(user.id)
            if not user_data:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            success = self.db.add_application(
                user_id=user_data['id'],
                name=fio,
                phone=phone,
                additional_info=additional_info,
                status='–ù–æ–≤–∞—è'
            )
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
                applications = self.db.get_applications()
                if applications:
                    new_app_id = max(app['id'] for app in applications)
                else:
                    new_app_id = 1
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.db.clear_user_state(user.id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await update.message.reply_text("‚úÖ " + MESSAGES['application_success'])
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
                await self.notify_admin_new_application(update, context, fio, phone, additional_info, new_app_id)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self.show_main_menu_silent(update, context)
                
                logger.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ID={new_app_id}, –§–ò–û={fio}, –¢–µ–ª–µ—Ñ–æ–Ω={phone}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={user.id}")
            else:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_application: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.db.clear_user_state(user.id)
    
    def validate_phone(self, phone: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone:
            return False
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
        clean_phone = re.sub(r'[^\d+]', '', phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        patterns = [
            r'^\+7\d{10}$',  # +7XXXXXXXXXX
            r'^8\d{10}$',    # 8XXXXXXXXXX
            r'^7\d{10}$',    # 7XXXXXXXXXX
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Å–∫–æ–±–∫–∞–º–∏
        original_patterns = [
            r'^\+7\s*\(\d{3}\)\s*\d{3}\s*\d{2}\s*\d{2}$',  # +7 (XXX) XXX XX XX
            r'^\+7\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2}$',      # +7 XXX XXX XX XX
            r'^8\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2}$',        # 8 XXX XXX XX XX
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        clean_valid = any(re.match(pattern, clean_phone) for pattern in patterns)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        original_valid = any(re.match(pattern, phone.strip()) for pattern in original_patterns)
        
        return clean_valid or original_valid
    
    def escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
        if not text:
            return text
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        return text
    
    async def send_admin_panel_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info(f"send_admin_panel_message: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç {update.effective_chat.id}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            if update.message:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏"), KeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ message (–¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å)
        if update.message:
            logger.info("admin_panel: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ update.message.reply_text")
            await update.message.reply_text(
                "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –î–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"admin_panel: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ context.bot.send_message –≤ —á–∞—Ç {update.effective_chat.id}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def start_delete_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        applications = self.db.get_applications()
        
        if not applications:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message = "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
        
        for i, app in enumerate(applications[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            message += f"{i}. –ó–∞—è–≤–∫–∞ #{app['id']}\n"
            message += f"   üë§ {app['name']}\n"
            message += f"   üìû {app['phone']}\n"
            message += f"   üìÖ {app['created_at']}\n\n"
        
        if len(applications) > 10:
            message += f"... –∏ –µ—â–µ {len(applications) - 10} –∑–∞—è–≤–æ–∫\n\n"
        
        message += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        self.db.save_user_state(user.id, 'delete_application')
        
        await update.message.reply_text(message)
    
    async def view_applications(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        try:
            applications = self.db.get_applications()
            
            if not applications:
                await update.message.reply_text("üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
                await asyncio.sleep(2)
                await self.admin_panel(update, context)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞—è–≤–æ–∫
            await update.message.reply_text(f"üìã **–í—Å–µ –∑–∞—è–≤–∫–∏ ({len(applications)}):**\n")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –æ–¥–Ω–æ–π
            for i, app in enumerate(applications, 1):
                try:
                    await self.send_application_info(update, context, app)
                    # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤
                    if i < len(applications):
                        await asyncio.sleep(2)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ {app['id']}: {e}")
                    continue
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await asyncio.sleep(2)
            await self.admin_panel(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ view_applications: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await asyncio.sleep(2)
            await self.admin_panel(update, context)
    
    async def send_application_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, app: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.db.get_user_by_id(app['user_id'])
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Markdown
            first_name = self.escape_markdown(user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω'))
            username = self.escape_markdown(user_data.get('username', 'username'))
            name = self.escape_markdown(app['name'])
            phone = self.escape_markdown(app['phone'])
            additional_info = self.escape_markdown(app['additional_info'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìß **–ó–∞—è–≤–∫–∞ #{app['id']}**\n\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {first_name} (@{username})\n"
            message += f"üî• **–§–ò–û:** {name}\n"
            message += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
            message += f"üí¨ **–ó–∞–ø—Ä–æ—Å:** {additional_info}\n"
            message += f"üïê **–î–∞—Ç–∞:** {app['created_at']}\n"
            status = app.get('status', '–ù–æ–≤–∞—è')
            status_emoji = "üÜï" if status == '–ù–æ–≤–∞—è' else "‚úÖ" if status == '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' else "‚ùì"
            message += f"üìä **–°—Ç–∞—Ç—É—Å:** {status_emoji} {status}"
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                except Exception as timeout_error:
                    if attempt < max_retries - 1:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º: {timeout_error}")
                        await asyncio.sleep(1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    else:
                        raise timeout_error  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ {app.get('id', 'Unknown')}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown
            try:
                simple_message = f"üìß –ó–∞—è–≤–∫–∞ #{app['id']}\n"
                simple_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                simple_message += f"üî• –§–ò–û: {app['name']}\n"
                simple_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app['phone']}\n"
                simple_message += f"üí¨ –ó–∞–ø—Ä–æ—Å: {app['additional_info']}\n"
                simple_message += f"üïê –î–∞—Ç–∞: {app['created_at']}\n"
                simple_message += f"üìä –°—Ç–∞—Ç—É—Å: {app.get('status', '–ù–æ–≤–∞—è')}"
                
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=simple_message
                        )
                        break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    except Exception as timeout_error:
                        if attempt < max_retries - 1:
                            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {timeout_error}")
                            await asyncio.sleep(1)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {timeout_error}")
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e2}")
    
    async def send_application_card(self, update: Update, context: ContextTypes.DEFAULT_TYPE, app: dict, is_reply: bool = True):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user_by_id(app['user_id'])
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Markdown
        first_name = self.escape_markdown(user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω'))
        username = self.escape_markdown(user_data.get('username', 'username'))
        name = self.escape_markdown(app['name'])
        phone = self.escape_markdown(app['phone'])
        additional_info = self.escape_markdown(app['additional_info'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        message = f"üìß **–ó–∞—è–≤–∫–∞ #{app['id']}**\n\n"
        message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {first_name} (@{username})\n"
        message += f"üî• **–§–ò–û:** {name}\n"
        message += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
        message += f"üí¨ **–ó–∞–ø—Ä–æ—Å:** {additional_info}\n"
        message += f"üïê **–î–∞—Ç–∞:** {app['created_at']}\n"
        status = app.get('status', '–ù–æ–≤–∞—è')
        status_emoji = "üÜï" if status == '–ù–æ–≤–∞—è' else "‚úÖ" if status == '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' else "‚ùì"
        message += f"üìä **–°—Ç–∞—Ç—É—Å:** {status_emoji} {status}"
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{app['id']}"),
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{app['id']}")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{app['id']}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_reply:
            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def view_inactive_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞—è–≤–æ–∫"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        inactive_users = self.db.get_users_without_applications()
        
        if not inactive_users:
            await update.message.reply_text("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞—è–≤–∫–∏! üéâ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ 5 —à—Ç—É–∫
        for i in range(0, len(inactive_users), 5):
            batch = inactive_users[i:i+5]
            message = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∑–∞—è–≤–æ–∫:**\n\n"
            
            for user_data in batch:
                username = f"@{user_data['username']}" if user_data['username'] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
                first_name = user_data['first_name'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                last_activity = user_data['last_seen'] or user_data['last_activity']
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                first_name = self.escape_markdown(first_name)
                username = self.escape_markdown(username)
                
                message += f"**ID:** {user_data['telegram_id']}\n"
                message += f"**–ò–º—è:** {first_name}\n"
                message += f"**Username:** {username}\n"
                message += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {last_activity}\n"
                message += "‚îÄ" * 30 + "\n\n"
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_users = len(self.db.get_all_users())
        users_with_apps = len(self.db.get_applications())
        inactive_count = len(inactive_users)
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**

üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}
üìã **–° –∑–∞—è–≤–∫–∞–º–∏:** {users_with_apps}
‚ùå **–ë–µ–∑ –∑–∞—è–≤–æ–∫:** {inactive_count}
üìà **–ö–æ–Ω–≤–µ—Ä—Å–∏—è:** {(users_with_apps/total_users*100):.1f}% (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
        """
        
        await update.message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)
    
    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_broadcast")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        self.db.save_user_state(user.id, 'broadcast_message')
        await update.message.reply_text(
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞**\n\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = update.effective_user
        
        if not self.is_admin(user.id):
            return
        
        app_count = self.db.get_application_count()
        users = self.db.get_all_users()
        user_count = len(users)
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {user_count}
üìã **–ó–∞—è–≤–∫–∏:** {app_count}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        await update.message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        await self.admin_panel(update, context)
    
    async def notify_admin_new_application(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                         name: str, phone: str, additional_info: str, app_id: int = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            user = update.effective_user
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏
            if app_id is not None:
                new_app_id = app_id
            else:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
                applications = self.db.get_applications()
                if applications:
                    new_app_id = max(app['id'] for app in applications)
                else:
                    new_app_id = 1
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Markdown
            first_name = self.escape_markdown(user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω')
            username = self.escape_markdown(user.username or 'username')
            name_escaped = self.escape_markdown(name)
            phone_escaped = self.escape_markdown(phone)
            additional_info_escaped = self.escape_markdown(additional_info or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            
            message = f"üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!**\n\n"
            message += f"üìÑ **–ó–∞—è–≤–∫–∞ #{new_app_id}**\n"
            message += f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {first_name} (@{username})\n"
            message += f"üî• **–§–ò–û:** {name_escaped}\n"
            message += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone_escaped}\n"
            message += f"üí¨ **–ó–∞–ø—Ä–æ—Å:** {additional_info_escaped}\n"
            message += f"üïê **–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            message += f"üìä **–°—Ç–∞—Ç—É—Å:** üÜï –ù–æ–≤–∞—è"
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{new_app_id}"),
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{new_app_id}")
                ],
                [
                    InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{new_app_id}")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_USER_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ #{new_app_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ #{new_app_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notify_admin_new_application: {e}")
    
    async def send_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        user = update.effective_user
        text = update.message.text
        
        if not self.is_admin(user.id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.db.get_all_users()
        
        if not users:
            await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        sent_count = 0
        failed_count = 0
        
        for user_data in users:
            try:
                await context.bot.send_message(
                    chat_id=user_data['telegram_id'],
                    text=text
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['telegram_id']}: {e}")
                failed_count += 1
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.clear_user_state(user.id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_message = f"""
üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

‚úÖ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {sent_count}
‚ùå **–û—à–∏–±–æ–∫:** {failed_count}
üìä **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}
        """
        
        await update.message.reply_text(result_message)
    
    async def handle_cancel_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
        query = update.callback_query
        user = update.effective_user
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.db.clear_user_state(user.id)
        
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await asyncio.sleep(1)
        await self.admin_panel(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.application.run_polling())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
